public static final String ur = "jdbc:postgresql://ec2-54-225-101-126.compute-1.amazonaws.com:5432/d64in60h3dpvf2?user=fcwlxdlohwgjtp&password=0xpGsFrLQgSJfp-4l9GE8HXdH-&ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory";

public static NonoPuzzle getPuzzle(int puzzleID) throws Exception {  //TODO id no exist
		String sql = " SELECT " + PUZZLE_OBJECT + 
				     " FROM   " + PUZZLE_TABLE  + 
				     " WHERE  " + PUZZLE_ID     + " = ?";
		
		Connection conn = getConnection();
		PreparedStatement ps = conn.prepareStatement(sql);
		ps.setInt(1, puzzleID);
		
		ResultSet rs = ps.executeQuery();
		if (!rs.isAfterLast()) { rs.next(); }
		NonoPuzzle puzzle = (NonoPuzzle) NonoUtil.byteToObject(rs.getBytes(1));
		
		rs.close();
		conn.close();
		return puzzle;
	}
	
	
	
	
	
	private static ParameterPolice police = null;
	
	
	/**
	 * Returns a reference to ParameterPolice object if there is already existing 
	 * one, or creates a ParameterPolice and returns the reference to it.
	 * @return A reference to ParameterPolice object.
	 */
	public static ParameterPolice getInstance() {
		if(police == null) {
			police = new ParameterPolice();
		}
		return police;
	}
	
	/**
	 * Accepts a string the represent a name as a parameter and throws an 
	 * NoSuchElementException if it is null. Hack around the provide unit tests
	 * catch only NoSuchElementException, not IllegalArgumentException.
	 * @param o An object to be checked if it is null.
	 * @throws NoSuchElementException if the passed object is null.
	 */
	public static void checkIfNullName(String s, String objectName) {
		if(s == null){
			throw new NoSuchElementException("Error: " + objectName + " is null!");
		}
	}
	
	
	public void sendMessage(String str) throws IOException {
		sendMessage(str.getBytes());
	}

	public void sendMessage(int value) throws IOException{
		sendMessage(NonoUtil.intToByte(value));
	}
	
	public void sendMessage(Object obj) throws IOException {
		sendMessage(NonoUtil.objecToByte(obj));
	}
	
	
	public String readMessageString() throws IOException {
		return new String(readMessageBytes());
	}

	public int readMessageInt() throws IOException {
		return NonoUtil.byteToInt(readMessageBytes());
	}
	
	public Object readMessageObject() throws IOException, ClassNotFoundException {
		return NonoUtil.byteToObject(readMessageBytes());
	}
	
	
	
import android.graphics.Color;
	//public static final String SERVER_IP = IPFinder.localIP();

	
	
	
	// Finds and returns a server IP. Returns null if cannot find server IP.
	private static String getServerIP() {
		InetAddress inetAddress = null;
		try {
			inetAddress = InetAddress.getByName(SERVER_NAME);
		}catch (UnknownHostException e) {
			return null;
		}
		return inetAddress.getHostAddress();
	}
	
	
	
	min < getMinDimension() || getMaxDimension() <= max
	
	
	@Test
	public void test_isInRange_Easy_1() {
		Difficulty d = Difficulty.EASY;
		assertTrue(d.isInRange(START_EASY, START_EASY));
		assertTrue(d.isInRange(START_MED-1, START_EASY+ADD_MORE));
		assertTrue(d.isInRange(START_EASY+ADD_SMALL, START_EASY+ADD_SMALL));
	}
	
	@Test
	public void test_isInRange_Easy_2() {
		Difficulty d = Difficulty.EASY;
		assertFalse(d.isInRange(-5, START_EASY));
		assertFalse(d.isInRange(START_EASY+ADD_MORE, START_MED+ADD_SMALL));
		assertFalse(d.isInRange(START_EASY+ADD_MORE, START_MED));
	}
	
	@Test
	public void test_isInRange_Med_1() {
		Difficulty d = Difficulty.MEDIUM;
		assertTrue(d.isInRange(START_MED, START_MED));
		assertTrue(d.isInRange(START_HARD-1, START_MED+ADD_MORE));
		assertTrue(d.isInRange(START_MED+ADD_SMALL, START_MED+ADD_SMALL));
	}
	
	@Test
	public void test_isInRange_Med_2() {
		Difficulty d = Difficulty.MEDIUM;
		assertFalse(d.isInRange(START_EASY+ADD_MORE, START_MED));
		assertFalse(d.isInRange(START_MED+ADD_MORE, START_HARD+ADD_SMALL));
		assertFalse(d.isInRange(START_MED+ADD_MORE, START_HARD));
	}

	@Test
	public void test_isInRange_Hard_1() {
		Difficulty d = Difficulty.HARD;
		assertTrue(d.isInRange(START_HARD, START_HARD));
		assertTrue(d.isInRange(START_INSANE-1, START_HARD+ADD_MORE));
		assertTrue(d.isInRange(START_HARD+ADD_SMALL, START_HARD+ADD_SMALL));
	}
	
	@Test
	public void test_isInRange_Hard_2() {
		Difficulty d = Difficulty.HARD;
		assertFalse(d.isInRange(START_MED+ADD_MORE, START_HARD));
		assertFalse(d.isInRange(START_HARD+ADD_MORE, START_INSANE+ADD_SMALL));
		assertFalse(d.isInRange(START_HARD+ADD_MORE, START_INSANE));
	}
	
	@Test
	public void test_isInRange_Insane_1() {
		Difficulty d = Difficulty.INSANE;
		assertTrue(d.isInRange(START_INSANE, START_INSANE));
		assertTrue(d.isInRange(START_UNDEF-1, START_INSANE+ADD_MORE));
		assertTrue(d.isInRange(START_INSANE+ADD_SMALL, START_INSANE+ADD_SMALL));
	}
	
	@Test
	public void test_isInRange_Insane_2() {
		Difficulty d = Difficulty.INSANE;
		assertFalse(d.isInRange(START_HARD+ADD_MORE, START_INSANE));
		assertFalse(d.isInRange(START_INSANE+ADD_MORE, START_UNDEF+ADD_SMALL));
		assertFalse(d.isInRange(START_INSANE+ADD_MORE, START_UNDEF));
	}
	
	@Test
	public void test_isInRange_Undef_1() {
		Difficulty d = Difficulty.UNDEFINED;
		assertTrue(d.isInRange(START_UNDEF, 10000));
		assertTrue(d.isInRange(START_HARD+ADD_MORE, START_INSANE+ADD_SMALL));
		assertTrue(d.isInRange(START_EASY-ADD_MORE, START_MED-ADD_SMALL));
	}
	
	@Test
	public void test_isInRange_Undef_2() {
		Difficulty d = Difficulty.UNDEFINED;
		assertFalse(d.isInRange(START_EASY+ADD_SMALL, START_EASY+ADD_SMALL));
		assertFalse(d.isInRange(START_HARD-1, START_MED+ADD_MORE));
		assertFalse(d.isInRange(START_INSANE, START_INSANE));
	}
	
	